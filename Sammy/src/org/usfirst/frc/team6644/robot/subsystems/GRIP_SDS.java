package org.usfirst.frc.team6644.robot.subsystems;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import edu.wpi.first.wpilibj.vision.VisionPipeline;

import org.opencv.core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgproc.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GRIP_SDS extends Subsystem implements VisionPipeline {

	// Outputs
	private Mat resizeImageOutput = new Mat();
	private Mat blur0Output = new Mat();
	public Mat hsvThresholdOutput = new Mat();
	private Mat blur1Output = new Mat();
	public Mat maskOutput = new Mat();
	private MatOfKeyPoint findBlobsOutput = new MatOfKeyPoint();
	public static double xVideoValue = 0;
	public static double yVideoValue = 0;
	public static double sizeVideoValue = 0;
	public static String value = new String(" ");
	public static boolean foundABlob = false;
	// private CvSource outputStream = CameraServer.getInstance().putVideo("Blur",
	// 640, 480);
	public static List<KeyPoint> ListOfPoints = new ArrayList<KeyPoint>();
	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the
	 * outputs.
	 */
	@Override
	public void initDefaultCommand() {

	}

	@Override
	public void process(Mat source0) {
		// Step Resize_Image0:
		// System.out.print(findBlobsOutput.row(10));
		Mat resizeImageInput = source0;
		double resizeImageWidth = 160.0;
		double resizeImageHeight = 120.0;
		int resizeImageInterpolation = Imgproc.INTER_CUBIC;
		resizeImage(resizeImageInput, resizeImageWidth, resizeImageHeight, resizeImageInterpolation, resizeImageOutput);

		// Step Blur0:
		// Mat blur0Input = resizeImageOutput;
		Mat blur0Input = resizeImageOutput;
		BlurType blur0Type = BlurType.get("Median Filter");
		double blur0Radius = 12;
		blur(blur0Input, blur0Type, blur0Radius, blur0Output);

		// Step HSV_Threshold0:
		Mat hsvThresholdInput = blur0Output;
		double[] hsvThresholdHue = { 0.0, 44 };
		double[] hsvThresholdSaturation = { 115, 214 };
		double[] hsvThresholdValue = { 65, 255.0 };
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Blur1:
		Mat blur1Input = hsvThresholdOutput;
		BlurType blur1Type = BlurType.get("Median Filter");
		double blur1Radius = 16;
		blur(blur1Input, blur1Type, blur1Radius, blur1Output);

		// Step Mask0:
		// Mat maskInput = resizeImageOutput;
		// Mat maskMask = blur1Output;
		// mask(maskInput, maskMask, maskOutput);

		// Step Find_Blobs0:
		Mat findBlobsInput = blur1Output;
		double findBlobsMinArea = 1.0;
		double[] findBlobsCircularity = { 0.0, 1.0 };
		boolean findBlobsDarkBlobs = false;
		findBlobs(findBlobsInput/* blur0Output */, findBlobsMinArea, findBlobsCircularity, findBlobsDarkBlobs,
				findBlobsOutput);

		// resizeImageOutput = new Mat();
		// blur0Output = new Mat();
		// hsvThresholdOutput = new Mat();
		// blur1Output = new Mat();
		// maskOutput = new Mat();
		// findBlobsOutput = new MatOfKeyPoint();

		// setting values stuff
		// KeyPoint[] points ;

		int largest = 0;
		int amount = 0;
		// int xVideoValue = -1;
		// int yVideoValue = -1;
		// int sizeVideoValue = -1;
		if (!findBlobsOutput.toList().isEmpty()) {
			ListOfPoints = findBlobsOutput.toList();
			foundABlob = true;
			value = "true";
			for (int index = 0; index < ListOfPoints.size() - 1; index++) {
				amount = ListOfPoints.size();
				if (ListOfPoints.get(index + 1).size > ListOfPoints.get(index).size) {
					largest = index + 1;
				} // end if
				if (!(ListOfPoints.get(index + 1).size > ListOfPoints.get(index).size)) {
					largest = index;
				} // end else if

			} // end for

		} // end big if
		else {
			foundABlob = false;
			value = "false";
			xVideoValue = -1;
			yVideoValue = -1;
			sizeVideoValue = -1;
			amount = 0;
		}
		if (!findBlobsOutput.toList().isEmpty()) {
			xVideoValue = (int) ListOfPoints.get(largest).pt.x;
			yVideoValue = (int) ListOfPoints.get(largest).pt.y;
			sizeVideoValue = (int) ListOfPoints.get(largest).size;
		}
		SmartDashboard.putNumber("X distance", centerrobotXAxis());
		SmartDashboard.putNumber("Y distance", centerrobotYAxis());
		SmartDashboard.putNumber("Number of Bananas", amount);

	}

	public double centerrobotXAxis() {
		double midxaxis = 80;
		if (xVideoValue <= midxaxis) {
			return midxaxis - xVideoValue;
		} else {
			return xVideoValue - midxaxis;
		}
	}// returns distance on the x axis from the center

	public double centerrobotYAxis() {
		double midyaxis = 70;
		if (yVideoValue <= midyaxis) {
			return midyaxis - yVideoValue;
		} else {
			return yVideoValue - midyaxis;
		}
	}// returns distance on the y axis from the center
public boolean foundABlobinPic() {
	return foundABlob;
}
	public double getxVideoValue() {
		//process(Vision.toBeProcessed);
		return xVideoValue;
	}

	public double getyVideoValue() {
		process(Vision.toBeProcessed);
		return yVideoValue;
	}

	public double getsizeVideoValue() {
		process(Vision.toBeProcessed);
		return sizeVideoValue;
	}

	/**
	 * This method is a generated getter for the output of a Resize_Image.
	 * 
	 * @return Mat output from Resize_Image.
	 */
	public Mat resizeImageOutput() {
		return resizeImageOutput;
	}

	/**
	 * This method is a generated getter for the output of a Blur.
	 * 
	 * @return Mat output from Blur.
	 */
	public Mat blur0Output() {
		return blur0Output;
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * 
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Blur.
	 * 
	 * @return Mat output from Blur.
	 */
	public Mat blur1Output() {
		return blur1Output;
	}

	/**
	 * This method is a generated getter for the output of a Mask.
	 * 
	 * @return Mat output from Mask.
	 */
	public Mat maskOutput() {
		return maskOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Blobs.
	 * 
	 * @return MatOfKeyPoint output from Find_Blobs.
	 */
	public MatOfKeyPoint findBlobsOutput() {
		return findBlobsOutput;
	}

	/**
	 * Scales and image to an exact size.
	 * 
	 * @param input
	 *            The image on which to perform the Resize.
	 * @param width
	 *            The width of the output in pixels.
	 * @param height
	 *            The height of the output in pixels.
	 * @param interpolation
	 *            The type of interpolation.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void resizeImage(Mat input, double width, double height, int interpolation, Mat output) {
		if (input != null) {
			Imgproc.resize(input, output, new Size(width, height), 0.0, 0.0, interpolation);

		}
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input
	 *            The image on which to perform the HSL threshold.
	 * @param hue
	 *            The min and max hue
	 * @param sat
	 *            The min and max saturation
	 * @param val
	 *            The min and max value
	 * @param output
	 *            The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val, Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]), new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * An indication of which type of filter to use for a blur. Choices are BOX,
	 * GAUSSIAN, MEDIAN, and BILATERAL
	 */
	enum BlurType {
		BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"), BILATERAL("Bilateral Filter");

		private final String label;

		BlurType(String label) {
			this.label = label;
		}

		public static BlurType get(String type) {
			if (BILATERAL.label.equals(type)) {
				return BILATERAL;
			} else if (GAUSSIAN.label.equals(type)) {
				return GAUSSIAN;
			} else if (MEDIAN.label.equals(type)) {
				return MEDIAN;
			} else {
				return BOX;
			}
		}

		@Override
		public String toString() {
			return this.label;
		}
	}

	/**
	 * Softens an image using one of several filters.
	 * 
	 * @param input
	 *            The image on which to perform the blur.
	 * @param type
	 *            The blurType to perform.
	 * @param doubleRadius
	 *            The radius for the blur.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void blur(Mat input, BlurType type, double doubleRadius, Mat output) {
		int radius = (int) (doubleRadius + 0.5);
		int kernelSize;
		switch (type) {
		case BOX:
			kernelSize = 2 * radius + 1;
			Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
			break;
		case GAUSSIAN:
			kernelSize = 6 * radius + 1;
			Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
			break;
		case MEDIAN:
			kernelSize = 2 * radius + 1;
			Imgproc.medianBlur(input, output, kernelSize);
			break;
		case BILATERAL:
			Imgproc.bilateralFilter(input, output, -1, radius, radius);
			break;
		}
	}

	/**
	 * Filter out an area of an image using a binary mask.
	 * 
	 * @param input
	 *            The image on which the mask filters.
	 * @param mask
	 *            The binary image that is used to filter.
	 * @param output
	 *            The image in which to store the output.
	 */

	/**
	 * Detects groups of pixels in an image.
	 * 
	 * @param input
	 *            The image on which to perform the find blobs.
	 * @param minArea
	 *            The minimum size of a blob that will be found
	 * @param circularity
	 *            The minimum and maximum circularity of blobs that will be found
	 * @param darkBlobs
	 *            The boolean that determines if light or dark blobs are found.
	 * @param blobList
	 *            The output where the MatOfKeyPoint is stored.
	 */
	private void findBlobs(Mat input, double minArea, double[] circularity, Boolean darkBlobs, MatOfKeyPoint blobList) {
		FeatureDetector blobDet = FeatureDetector.create(FeatureDetector.SIMPLEBLOB);
		try {
			File tempFile = File.createTempFile("config", ".xml");

			StringBuilder config = new StringBuilder();

			config.append("<?xml version=\"1.0\"?>\n");
			config.append("<opencv_storage>\n");
			config.append("<thresholdStep>10.</thresholdStep>\n");
			config.append("<minThreshold>50.</minThreshold>\n");
			config.append("<maxThreshold>220.</maxThreshold>\n");
			config.append("<minRepeatability>2</minRepeatability>\n");
			config.append("<minDistBetweenBlobs>10.</minDistBetweenBlobs>\n");
			config.append("<filterByColor>1</filterByColor>\n");
			config.append("<blobColor>");
			config.append((darkBlobs ? 0 : 255));
			config.append("</blobColor>\n");
			config.append("<filterByArea>1</filterByArea>\n");
			config.append("<minArea>");
			config.append(minArea);
			config.append("</minArea>\n");
			config.append("<maxArea>");
			config.append(Integer.MAX_VALUE);
			config.append("</maxArea>\n");
			config.append("<filterByCircularity>1</filterByCircularity>\n");
			config.append("<minCircularity>");
			config.append(circularity[0]);
			config.append("</minCircularity>\n");
			config.append("<maxCircularity>");
			config.append(circularity[1]);
			config.append("</maxCircularity>\n");
			config.append("<filterByInertia>1</filterByInertia>\n");
			config.append("<minInertiaRatio>0.1</minInertiaRatio>\n");
			config.append("<maxInertiaRatio>" + Integer.MAX_VALUE + "</maxInertiaRatio>\n");
			config.append("<filterByConvexity>1</filterByConvexity>\n");
			config.append("<minConvexity>0.95</minConvexity>\n");
			config.append("<maxConvexity>" + Integer.MAX_VALUE + "</maxConvexity>\n");
			config.append("</opencv_storage>\n");
			FileWriter writer;
			writer = new FileWriter(tempFile, false);
			writer.write(config.toString());
			writer.close();
			blobDet.read(tempFile.getPath());
		} catch (IOException e) {
			e.printStackTrace();
		}

		blobDet.detect(input, blobList);
	}

}